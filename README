# -*- org -*-
#+TITLE: Functional XML Tokenizer for Gnu/Emacs
#+AUTHOR: Patrick McAllister (pma@rdorte.org)


~xmltokf.el~ provides XML tokenizer functions that don’t have any side
effects.  This makes it easier to program some XML editing functions.

It wraps and relies on the functionality in the GNU/Emacs ~xmltok.el~
library ([[https://git.savannah.gnu.org/cgit/emacs.git/tree/lisp/nxml/xmltok.el][source]]), which in turn provides the tokenizer that does a lot
of work for various XML functions in Gnu/Emacs.

The mostly “functional” library provided here also includes some
functions that do have side effects (they end in ~!~).  These
functions allow you to change XML tokens or elements in a programmatic
way, without interfering with any of the editing features provided in
other libraries that rely on ~xmltok.el~

For several ~xmltok.el~ functions, this library just adds a logically
equivalent ~xmltokf~ function: ~xmltok-start-tag-local-name~ becomes
~xmltokf-start-tag-local-name~, for instance.  The return values are
not equivalent.

To scan through a document, do something like this:

#+BEGIN_SRC emacs-lisp
  (let ((current-token (xmltokf-scan-here (point-min)))
        stack)
    (while (and current-token
                (xmltokf-token-type current-token))
      ;; Do your stuff...
      (push current-token stack)
      (setq current-token (xmltokf-scan-here (xmltokf-token-end current-token))))
    (nreverse stack))
#+END_SRC

Note that this does not change any of the global variables defined in
~xmltok~, does not move the point, and does not change any match-data
or other things.  That means it does not interfere with validation or
other operations that rely on those variables.

To delete an element at a certain position:

#+BEGIN_SRC emacs-lisp
  (with-temp-buffer
    (insert "<a><b/></a>")
    (xmltokf-drop-element! (xmltokf-scan-element 4))
    (buffer-string))
#+END_SRC

#+RESULTS:
: <a></a>

* Motivation: problems with the GNU/Emacs ~xmltok.el~ library

There aren’t really any problems, it’s perfectly suitable for its
purpose.  But its purpose may not always be what you want, for the
following reason:

The main entry point is ~xmltok-forward~, which looks at the next
token, advances the point over it, and stores the tokenizer state in a
few variables that are not buffer-local.  The macro ~xmltok-save~ makes
this obvious:

#+BEGIN_SRC emacs-lisp
  ;; Quoted here to avoid evaluation
  '(defmacro xmltok-save (&rest body)
     (declare (indent 0) (debug t))
     `(let (xmltok-type
            xmltok-start
            xmltok-name-colon
            xmltok-name-end
            xmltok-replacement
            xmltok-attributes
            xmltok-namespace-attributes
            xmltok-errors)
        ,@body))
#+END_SRC


Now, these variables are not buffer local.  When you start Emacs and
automatically open a bunch of XML files and have ~rng-validate-mode~
enabled, Emacs will start evaluating each of the buffers with XML
files.  If your XML files are big enough, Emacs may decide to
interrupt the process in buffer A to do some work in buffer B.
Obviously, the variables set in buffer A will not work in buffer B,
causing evaluation to fail.  The functional library here does not
solve this problem, but at least it doesn’t suffer from it.  You could
try to define the variables wrapped by ~xmltok-save~ as buffer-local,
that should work.

Another scenario is when you want to use ~xmltok~ functions to edit an
XML document in a buffer by using some function.  Since validation as
well as ~nxml~ fontification can lag behind your edits, a function
making use of any of the standard ~xmltok~ functions will be in
trouble.

It’s a bit tricky to reproduce, but this should illustrate things
sufficiently:

#+BEGIN_SRC emacs-lisp
  (let ((buff-a (get-buffer-create "*tmp A*"))
        (buff-b (get-buffer-create "*tmp B*")))
    (with-current-buffer buff-a
      (erase-buffer)
      (insert "<?-- hello -->\n<a xml:id=\"buff-a\" xmlns=\"http://buff-a\"/>")
      (goto-char (point-min))
      (xmltok-forward))
    (with-current-buffer buff-b
      (erase-buffer)
      (insert "<b xmlns=\"http://buff-b\" xml:id=\"b\" />")
      (goto-char (point-min))
      (xmltok-forward))
    (string=
     (with-current-buffer buff-a
       (xmltok-start-tag-local-name))
     "a"))
#+END_SRC


That won't evaluate to true, even though you might think it should!
The function ~xmltok-start-tag-local-name~ extracts the name based on
variables set in ~buff-b~.  These are obviously not correct in
~buff-a~.


With the current library, you’d do:

#+BEGIN_SRC emacs-lisp
  (let ((buff-a (get-buffer-create "*tmp A*"))
        (buff-b (get-buffer-create "*tmp B*")))
    (with-current-buffer buff-a
      (erase-buffer)
      (insert "<!-- hello --><a xml:id=\"buff-a\" xmlns=\"http://buff-a\"/>")
      (goto-char (point-min))
      (xmltokf-scan-here (point))
      (xmltok-forward))
    (with-current-buffer buff-b
      (erase-buffer)
      (insert "<b xmlns=\"http://buff-b\" xml:id=\"b\" />")
      (goto-char (point-min))
      (xmltok-forward))
    (string=
     (with-current-buffer buff-a
       ;; The `xmltok-forward' above left us after the comment.
       (xmltokf-start-tag-local-name (xmltokf-scan-here (point))))
     "a"))
#+END_SRC

#+RESULTS:
: t


Much of this is unnecessary, actually, since the token contains the
buffer information anyway:

#+BEGIN_SRC emacs-lisp
  (let ((buff-a (get-buffer-create "*tmp A*"))
        my-token)
    (with-current-buffer buff-a
      (erase-buffer)
      (insert "<!-- hello --><a xml:id=\"buff-a\" xmlns=\"http://buff-a\"/>")
      (goto-char (point-min))
      (xmltokf-scan-here (point))
      (xmltok-forward)  ;; The `xmltok-forward' leaves point after the
                        ;; comment.
      (setq my-token (xmltokf-scan-here (point))))
    ;; Somewhere outside buff-a:
    (string=
     (xmltokf-start-tag-local-name my-token)
     "a"))
#+END_SRC

#+RESULTS:
: t

